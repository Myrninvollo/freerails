/*
 * NewTrainScheduleJPanel.java
 *
 * Created on 24 August 2003, 00:18
 */

package jfreerails.client.view;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;

import jfreerails.client.renderer.ViewLists;
import jfreerails.move.ChangeTrainScheduleMove;
import jfreerails.move.Move;
import jfreerails.world.cargo.CargoType;
import jfreerails.world.station.StationModel;
import jfreerails.world.top.KEY;
import jfreerails.world.top.NonNullElements;
import jfreerails.world.top.ReadOnlyWorld;
import jfreerails.world.top.WorldListListener;
import jfreerails.world.train.ImmutableSchedule;
import jfreerails.world.train.MutableSchedule;
import jfreerails.world.train.TrainModel;
import jfreerails.world.train.TrainOrdersModel;
/**
 *  This JPanel displays a train's schedule and provides controls that let you edit it.
 * @author  Luke Lindsay
 */
public class NewTrainScheduleJPanel extends javax.swing.JPanel implements NewView, WorldListListener {
    
    private ReadOnlyWorld w;
    
    private ViewLists vl;
    
    private  java.awt.event.ActionListener oldActionListener;
    
    private int trainNumber = -1;
    
    private int scheduleID = -1;
    
    private TrainOrdersListModel listModel;
    
    private CallBacks callbacks = CallBacks.NULL_INSTANCE;
    
    /** Creates new form NewTrainScheduleJPanel */
    public NewTrainScheduleJPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        trainOrderJPanel1 = new jfreerails.client.view.TrainOrderJPanel();
        editOrderJPopupMenu = new javax.swing.JPopupMenu();
        gotoStationJMenuItem = new javax.swing.JMenuItem();
        changeStationJMenu = new javax.swing.JMenu();
        removeStationJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        addWagonJMenu = new javax.swing.JMenu();
        removeWagonsJMenu = new javax.swing.JMenu();
        removeLastJMenuItem = new javax.swing.JMenuItem();
        removeAllJMenuItem = new javax.swing.JMenuItem();
        changeConsistJMenu = new javax.swing.JMenu();
        noChangeJMenuItem = new javax.swing.JMenuItem();
        engineOnlyJMenuItem = new javax.swing.JMenuItem();
        waitJMenu = new javax.swing.JMenu();
        dontWaitJMenuItem = new javax.swing.JMenuItem();
        waitUntilFullJMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        pullUpJMenuItem = new javax.swing.JMenuItem();
        pushDownJMenuItem = new javax.swing.JMenuItem();
        addStationJButton = new javax.swing.JButton();
        priorityOrdersJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orders = new javax.swing.JList();

        gotoStationJMenuItem.setText("Goto station");
        gotoStationJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoStationJMenuItemActionPerformed(evt);
            }
        });

        editOrderJPopupMenu.add(gotoStationJMenuItem);

        changeStationJMenu.setText("Change Station");
        editOrderJPopupMenu.add(changeStationJMenu);

        removeStationJMenuItem.setText("Remove station");
        removeStationJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStationJMenuItemActionPerformed(evt);
            }
        });

        editOrderJPopupMenu.add(removeStationJMenuItem);

        editOrderJPopupMenu.add(jSeparator1);

        addWagonJMenu.setText("Add Wagon");
        editOrderJPopupMenu.add(addWagonJMenu);

        removeWagonsJMenu.setText("Remove wagon(s)");
        removeLastJMenuItem.setText("Remove last");
        removeLastJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLastJMenuItemActionPerformed(evt);
            }
        });

        removeWagonsJMenu.add(removeLastJMenuItem);

        removeAllJMenuItem.setText("Remove all wagons");
        removeAllJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllJMenuItemActionPerformed(evt);
            }
        });

        removeWagonsJMenu.add(removeAllJMenuItem);

        editOrderJPopupMenu.add(removeWagonsJMenu);

        changeConsistJMenu.setText("Change consist to..");
        noChangeJMenuItem.setText("'No change'");
        noChangeJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noChangeJMenuItemActionPerformed(evt);
            }
        });

        changeConsistJMenu.add(noChangeJMenuItem);

        engineOnlyJMenuItem.setText("Engine only");
        engineOnlyJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineOnlyJMenuItemActionPerformed(evt);
            }
        });

        changeConsistJMenu.add(engineOnlyJMenuItem);

        editOrderJPopupMenu.add(changeConsistJMenu);

        waitJMenu.setText("Wait at station");
        dontWaitJMenuItem.setText("Don't wait");
        dontWaitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dontWaitJMenuItemActionPerformed(evt);
            }
        });

        waitJMenu.add(dontWaitJMenuItem);

        waitUntilFullJMenuItem.setText("Wait until full");
        waitUntilFullJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitUntilFullJMenuItemActionPerformed(evt);
            }
        });

        waitJMenu.add(waitUntilFullJMenuItem);

        editOrderJPopupMenu.add(waitJMenu);

        editOrderJPopupMenu.add(jSeparator2);

        pullUpJMenuItem.setText("Pull up");
        pullUpJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pullUpJMenuItemActionPerformed(evt);
            }
        });

        editOrderJPopupMenu.add(pullUpJMenuItem);

        pushDownJMenuItem.setText("Push down");
        pushDownJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushDownJMenuItemActionPerformed(evt);
            }
        });

        editOrderJPopupMenu.add(pushDownJMenuItem);

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.TitledBorder("Schedule"));
        addStationJButton.setText("Add Station");
        addStationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStationJButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(addStationJButton, gridBagConstraints);

        priorityOrdersJButton.setText("Add Priority Orders");
        priorityOrdersJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityOrdersJButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(priorityOrdersJButton, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(280, 160));
        orders.setBackground(new java.awt.Color(204, 204, 204));
        orders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        orders.setCellRenderer(trainOrderJPanel1);
        orders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(orders);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void removeAllJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllJMenuItemActionPerformed
        // Add your handling code here:
        removeAllWagons();
    }//GEN-LAST:event_removeAllJMenuItemActionPerformed
    
    private void removeLastJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLastJMenuItemActionPerformed
        // Add your handling code here:
        removeLastWagon();
    }//GEN-LAST:event_removeLastJMenuItemActionPerformed
    
    private void waitUntilFullJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitUntilFullJMenuItemActionPerformed
        // Add your handling code here:
        setWaitUntilFull(true);
    }//GEN-LAST:event_waitUntilFullJMenuItemActionPerformed
    
    private void dontWaitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dontWaitJMenuItemActionPerformed
        // Add your handling code here:
        setWaitUntilFull(false);
    }//GEN-LAST:event_dontWaitJMenuItemActionPerformed
    
    private void engineOnlyJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineOnlyJMenuItemActionPerformed
        // Add your handling code here:
        removeAllWagons();
    }//GEN-LAST:event_engineOnlyJMenuItemActionPerformed
    
    private void noChangeJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noChangeJMenuItemActionPerformed
        // Add your handling code here:
        noChange();
    }//GEN-LAST:event_noChangeJMenuItemActionPerformed
    
    private void priorityOrdersJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityOrdersJButtonActionPerformed
        // Add your handling code here:
        MutableSchedule s = getSchedule();
        s.setPriorityOrders(new TrainOrdersModel(0, null, false));       
        sendUpdateMove(s);
    }//GEN-LAST:event_priorityOrdersJButtonActionPerformed
    
    private void addStationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStationJButtonActionPerformed
        // Add your handling code here:
        MutableSchedule s = getSchedule();
        s.addOrder(new TrainOrdersModel(0, null, false));       
        sendUpdateMove(s);
    }//GEN-LAST:event_addStationJButtonActionPerformed
    
    private void removeStationJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStationJMenuItemActionPerformed
        // Add your handling code here:
        MutableSchedule s = getSchedule();
        int i = orders.getSelectedIndex();
        s.removeOrder(i);
        sendUpdateMove(s);       
    }//GEN-LAST:event_removeStationJMenuItemActionPerformed
    
    private void gotoStationJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotoStationJMenuItemActionPerformed
        // Add your handling code here:
        MutableSchedule s = getSchedule();
        int i = orders.getSelectedIndex();
        s.setOrderToGoto(i);
        sendUpdateMove(s);
    }//GEN-LAST:event_gotoStationJMenuItemActionPerformed
    
    private void pushDownJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushDownJMenuItemActionPerformed
        // Add your handling code here:
        MutableSchedule s = getSchedule();
        int i = orders.getSelectedIndex();
        s.pushDown(i);
        sendUpdateMove(s);
        orders.setSelectedIndex(i+1);
    }//GEN-LAST:event_pushDownJMenuItemActionPerformed
    
    private void ordersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersMouseClicked
        // Add your handling code here:
        
        int i = orders.getSelectedIndex();
         MutableSchedule s = getSchedule();
        if(i >= s.getNumOrders()){
            //The selected index does not exist!
            //For some reason, the JList hasn't updated yet.
            i = -1;
        }
        if(-1 != i  && java.awt.event.MouseEvent.BUTTON3 == evt.getButton()){
            //If an element is select and the right button is pressed.
           
            TrainOrdersModel order = s.getOrder(i);
            
            pullUpJMenuItem.setEnabled(s.canPullUp(i));
            pushDownJMenuItem.setEnabled(s.canPushDown(i));
            gotoStationJMenuItem.setEnabled(s.canSetGotoStation(i));
            removeWagonsJMenu.setEnabled(order.orderHasWagons());
            waitJMenu.setEnabled(order.orderHasWagons());
            addWagonJMenu.setEnabled(order.hasLessThanMaxiumNumberOfWagons());
            setupWagonsPopup();
            setupStationsInPopup();
            this.editOrderJPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_ordersMouseClicked
    
    private void pullUpJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pullUpJMenuItemActionPerformed
        // Add your handling code here:
        MutableSchedule s = getSchedule();
        int i = orders.getSelectedIndex();
        s.pullUp(i);
        sendUpdateMove(s);
        orders.setSelectedIndex(i-1);
    }//GEN-LAST:event_pullUpJMenuItemActionPerformed
    
    public void setup(jfreerails.world.top.ReadOnlyWorld w, jfreerails.client.renderer.ViewLists vl, CallBacks cb) {
        this.w =w;
        trainOrderJPanel1.setup(w, vl, null);
        this.callbacks = cb;
    }
    
    public void display(int trainNumber){
        this.trainNumber = trainNumber;
        TrainModel train = (TrainModel) w.get(KEY.TRAINS, trainNumber);
        this.scheduleID = train.getScheduleID();
        
        listModel = new TrainOrdersListModel(w, trainNumber);
        orders.setModel(listModel);        
        orders.setFixedCellWidth(250); 
        listModel.fireRefresh();
        enableButtons();
    }
    
    private void enableButtons(){
        MutableSchedule s  = getSchedule();
       
        addStationJButton.setEnabled(s.canAddOrder());
        
        //Only one set of prority orders are allowed.
        priorityOrdersJButton.setEnabled(!s.hasPriorityOrders());
    }
    
    private MutableSchedule getSchedule(){
        TrainModel train = (TrainModel)w.get(KEY.TRAINS, trainNumber);
        ImmutableSchedule immutableSchedule = (ImmutableSchedule)w.get(KEY.TRAIN_SCHEDULES, train.getScheduleID());
        return new MutableSchedule(immutableSchedule);
        
        
    }
    
    
    /** This sets the list of stations in the select station popup.
     *It needs to be called before each time the popup is shown since
     *stations may have been added or removed.
     */
    private void setupStationsInPopup() {
        
        changeStationJMenu.removeAll(); //Remove existing menu items.
        NonNullElements stations = new NonNullElements(KEY.STATIONS, w);
        while (stations.next()) {
            final StationModel stationModel =
            (StationModel) stations.getElement();
            final int stationIndex = stations.getIndex();
            JMenuItem stationMenuItem = new JMenuItem();
            
            stationMenuItem.setText(stationModel.getStationName());
            stationMenuItem
            .addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                   
                }
            });
            changeStationJMenu.add(stationMenuItem);
            
        }
        
        JSeparator jSeparator1 = new javax.swing.JSeparator();
        changeStationJMenu.add(jSeparator1);
    }
    
    private void setupWagonsPopup() {
        addWagonJMenu.removeAll(); //Remove existing menu items.
        
        NonNullElements cargoTypes = new NonNullElements(KEY.CARGO_TYPES, w);
        while (cargoTypes.next()) {
            final CargoType wagonType = (CargoType) cargoTypes.getElement();
            JMenuItem wagonMenuItem = new JMenuItem();
            final int wagonTypeNumber = cargoTypes.getIndex();
            wagonMenuItem.setText(wagonType.getDisplayName());
            wagonMenuItem
            .addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    
                    addWagon(wagonTypeNumber);
                }
            });
            addWagonJMenu.add(wagonMenuItem);
        }
    }
    
    public void setStationNumber(int stationIndex){
        TrainOrdersModel oldOrders, newOrders;
        MutableSchedule s = getSchedule();
        int orderNumber = this.orders.getSelectedIndex();
        oldOrders = s.getOrder(orderNumber);
        newOrders = new TrainOrdersModel(stationIndex, oldOrders.getConsist(), oldOrders.getWaitUntilFull());
        s.setOrder(orderNumber, newOrders);
        
        sendUpdateMove(s);
    }
    
    public void noChange(){
        TrainOrdersModel oldOrders, newOrders;
        MutableSchedule s = getSchedule();
        int orderNumber = this.orders.getSelectedIndex();
        oldOrders = s.getOrder(orderNumber);
        newOrders = new TrainOrdersModel(oldOrders.getStationNumber(), null, false);
        s.setOrder(orderNumber, newOrders);
        
        sendUpdateMove(s);
    }
    
    public void setWaitUntilFull(boolean b){
        TrainOrdersModel oldOrders, newOrders;
        MutableSchedule s = getSchedule();
        int orderNumber = this.orders.getSelectedIndex();
        oldOrders = s.getOrder(orderNumber);
        newOrders = new TrainOrdersModel(oldOrders.getStationNumber(), oldOrders.consist, b);
        s.setOrder(orderNumber, newOrders);
        
        sendUpdateMove(s);
    }
    
    public void  addWagon(int wagonTypeNumber){
        TrainOrdersModel oldOrders, newOrders;
        MutableSchedule s = getSchedule();
        int orderNumber = this.orders.getSelectedIndex();
        oldOrders = s.getOrder(orderNumber);
        
        int[] newConsist;
        
        //The consist will be null if old orders were 'no change'.
        if(null != oldOrders.consist){
            int oldLength = oldOrders.consist.length;
            newConsist = new int[oldLength+1];
            //Copy existing wagons
            for( int i = 0 ; i < oldLength ; i ++){
                newConsist[i] = oldOrders.consist[i];
            }
            //Then add specified wagon.
            newConsist[oldLength] = wagonTypeNumber;
        }else{
            newConsist = new int[]{wagonTypeNumber};
        }
        
        newOrders = new TrainOrdersModel(oldOrders.getStationNumber(), newConsist, oldOrders.getWaitUntilFull());
        s.setOrder(orderNumber, newOrders);
        
        sendUpdateMove(s);
    }
    
    public void removeAllWagons(){
        TrainOrdersModel oldOrders, newOrders;
        MutableSchedule s = getSchedule();
        int orderNumber = this.orders.getSelectedIndex();
        oldOrders = s.getOrder(orderNumber);
        newOrders = new TrainOrdersModel(oldOrders.getStationNumber(), new int[0], false);
        s.setOrder(orderNumber, newOrders);
        sendUpdateMove(s);
    }
    
    public void removeLastWagon(){
        TrainOrdersModel oldOrders, newOrders;
        MutableSchedule s = getSchedule();
        int orderNumber = this.orders.getSelectedIndex();
        oldOrders = s.getOrder(orderNumber);
        int newLength = oldOrders.consist.length -1 ;
        int[] newConsist   = new int[newLength];
        //Copy existing wagons
        for( int i = 0 ; i < newLength ; i ++){
            newConsist[i] = oldOrders.consist[i];
        }
        newOrders = new TrainOrdersModel(oldOrders.getStationNumber(), newConsist, oldOrders.waitUntilFull);
        s.setOrder(orderNumber, newOrders);
        
        sendUpdateMove(s);
    }
    
    private void sendUpdateMove(MutableSchedule mutableSchedule ){       
        TrainModel train = (TrainModel)w.get(KEY.TRAINS, this.trainNumber);
        int scheduleID = train.getScheduleID();
        ImmutableSchedule before = (ImmutableSchedule)w.get(KEY.TRAIN_SCHEDULES, scheduleID);
        ImmutableSchedule after = mutableSchedule.toImmutableSchedule();
        Move m = new ChangeTrainScheduleMove(scheduleID, before, after);
        this.callbacks.processMove(m);        
    }
    
    public void listUpdated(KEY key, int index) {
        if(KEY.TRAIN_SCHEDULES == key && this.scheduleID == index){
            listModel.fireRefresh();
            enableButtons();
        }
    }
    
    public void itemAdded(KEY key, int index) {
        //do nothing.
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStationJButton;
    private javax.swing.JMenu addWagonJMenu;
    private javax.swing.JMenu changeConsistJMenu;
    private javax.swing.JMenu changeStationJMenu;
    private javax.swing.JMenuItem dontWaitJMenuItem;
    private javax.swing.JPopupMenu editOrderJPopupMenu;
    private javax.swing.JMenuItem engineOnlyJMenuItem;
    private javax.swing.JMenuItem gotoStationJMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem noChangeJMenuItem;
    private javax.swing.JList orders;
    private javax.swing.JButton priorityOrdersJButton;
    private javax.swing.JMenuItem pullUpJMenuItem;
    private javax.swing.JMenuItem pushDownJMenuItem;
    private javax.swing.JMenuItem removeAllJMenuItem;
    private javax.swing.JMenuItem removeLastJMenuItem;
    private javax.swing.JMenuItem removeStationJMenuItem;
    private javax.swing.JMenu removeWagonsJMenu;
    private jfreerails.client.view.TrainOrderJPanel trainOrderJPanel1;
    private javax.swing.JMenu waitJMenu;
    private javax.swing.JMenuItem waitUntilFullJMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
